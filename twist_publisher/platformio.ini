; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[env:esp32-s3-devkitc-1]
platform = espressif32
board = esp32-s3-devkitc-1
board_build.cmake_extra_args = -DZ_FEATURE_LINK_SERIAL=1 -DZ_FEATURE_LINK_TCP=0 -DZ_FEATURE_LINK_UDP_UNICAST=0 -DZ_TRANSPORT_LEASE=60000 -DZ_TRANSPORT_LEASE_EXPIRE_FACTOR=2
framework = espidf
; -I include: tells the project to include the ros_message_types header we have in the '/include' folder
; -DUSER_TYPE_FILE: gets used in a pico-ros cmake macro to build the custom types
;    see https://github.com/Pico-ROS/Pico-ROS-software/blob/a62a46efde433d6e934d1a52a049e01b631f8b58/src/picoserdes.h#L94-L95
; -I config: tells the project to include the `/config` folder which has `ucdr/config.h` for the ESP32's Micro-CDR ENDIANNESS
build_flags =
    -DZENOH_C_STANDARD=99
    -DZENOH_COMPILER_GCC
    -DZ_BATCH_SIZE_TX=1500
    -DZ_BATCH_UNICAST_SIZE=2048
    -I include
    -DUSER_TYPE_FILE='"my_ros_message_types.h"'
    -DZENOH_ESPIDF  ; this was required to build Pico-ROS against Zenoh
    ; -DZENOH_LOG_DEBUG ; helpful to see Zenoh debug log
    ; -DZENOH_LOG_TRACE ; helpful to see where errors are coming from
    -I config
; monitor_speed = 115200
; monitor_port = /dev/ttyACM0
; monitor_rts = 0
; monitor_dtr = 0
lib_deps =
    http://github.com/saikishor/zenoh-pico#a56a55c2c5b34195ae1ad4fe2297f8ed30842a9d
    https://github.com/eProsima/Micro-CDR#5a198fca92fba1819a04a7a6b9da5b2cbab008fd
    https://github.com/saikishor/led_strip#f7e51efbf1bfd8c40e7c176e4bcb3f7cda5b60ff
    https://github.com/MarqRazz/Pico-ROS-software.git#741bee659593b80e2698e3d544a00a0e22821cac