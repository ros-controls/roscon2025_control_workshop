; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[env:esp32-s3-devkitc-1]
platform = espressif32
board = esp32-s3-devkitc-1
framework = arduino
; -I include: tells the project to include the ros_message_types header we have in the '/include' folder
; -DUSER_TYPE_FILE: gets used in a pico-ros cmake macro to build the custom types
;    see https://github.com/Pico-ROS/Pico-ROS-software/blob/a62a46efde433d6e934d1a52a049e01b631f8b58/src/picoserdes.h#L94-L95
; -I config: tells the project to include the `/config` folder which has `ucdr/config.h` for the ESP32's Micro-CDR ENDIANNESS
build_flags =
    -DZENOH_C_STANDARD=99
    -DZ_BATCH_SIZE_TX=1500
    -DZ_BATCH_UNICAST_SIZE=2048
    -I include
    -DUSER_TYPE_FILE='"my_ros_message_types.h"'
    -DZENOH_ARDUINO_ESP32  ; this was required to build Pico-ROS against Zenoh
    ; -DZENOH_LOG_DEBUG ; helpful to see Zenoh debug log
    ; -DZENOH_LOG_TRACE ; helpful to see where errors are coming from
    -I config
monitor_speed = 115200
; monitor_rts = 0
; monitor_dtr = 0
lib_deps =
    http://github.com/eclipse-zenoh/zenoh-pico
    https://github.com/eProsima/Micro-CDR
    ; clone the following repos yourself in the .pio/libdeps directory:
    ; https://github.com/Pico-ROS/Pico-ROS-software.git
